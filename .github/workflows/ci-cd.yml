name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # First build each platform in parallel
  build-platform:
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false # Continue with other platforms if one fails
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Checkout Code
        uses: actions/checkout@v3

      # Add cache for npm dependencies
      - name: Cache node modules
        id: cache-node
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-node-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Convert repository name to lowercase for Docker tags
      - name: Prepare Docker Tags
        id: prep
        run: |
          REPO_LOWERCASE="$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
          echo "REPO_LOWERCASE=$REPO_LOWERCASE" >> $GITHUB_ENV
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "PLATFORM_TAG=$PLATFORM_TAG" >> $GITHUB_ENV
          echo "lowercase repository name: $REPO_LOWERCASE"
          echo "platform tag: $PLATFORM_TAG"

      # Build platform-specific image
      - name: Build Platform Image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          build-args: |
            NEXT_PUBLIC_PROJECT_ID=${{ secrets.NEXT_PUBLIC_PROJECT_ID }}
          tags: |
            ghcr.io/${{ env.REPO_LOWERCASE }}:${{ env.PLATFORM_TAG }}
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_LOWERCASE }}:cache-${{ env.PLATFORM_TAG }}
          cache-to: ${{ github.event_name != 'pull_request' && format('type=registry,ref=ghcr.io/{0}:cache-{1},mode=max', env.REPO_LOWERCASE, env.PLATFORM_TAG) || 'type=inline' }}
          outputs: type=image,name=ghcr.io/${{ env.REPO_LOWERCASE }}:${{ env.PLATFORM_TAG }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
      
      # Save digests for later use in the manifest job
      - name: Output Digest
        id: digest
        run: |
          echo "DIGEST=${{ steps.docker_build.outputs.digest }}" >> $GITHUB_OUTPUT
      
      - name: Display Build Cache Stats
        run: |
          echo "============= Build Performance Summary for ${{ matrix.platform }} ============="
          echo "Platform build duration: ${{ steps.docker_build.outputs.buildDuration || 'N/A' }}s"
          echo "Node modules cache: ${{ steps.cache-node.outputs.cache-hit == 'true' && 'HIT ✅' || 'MISS ❌' }}"
          echo "Docker layer cache: Using registry cache at ghcr.io/${{ env.REPO_LOWERCASE }}:cache-${{ env.PLATFORM_TAG }}"
          echo "=============================================================="

  # Create a multi-platform manifest
  create-manifest:
    name: Create Multi-Platform Manifest
    runs-on: ubuntu-latest
    needs: build-platform
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
      
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Prepare repository name
      - name: Prepare Docker Tags
        id: prep
        run: |
          REPO_LOWERCASE="$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
          echo "REPO_LOWERCASE=$REPO_LOWERCASE" >> $GITHUB_ENV
      
      # Create and push a multi-platform manifest
      - name: Create and Push Manifest
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            NEXT_PUBLIC_PROJECT_ID=${{ secrets.NEXT_PUBLIC_PROJECT_ID }}
          tags: |
            ghcr.io/${{ env.REPO_LOWERCASE }}:latest
            ghcr.io/${{ env.REPO_LOWERCASE }}:${{ github.sha }}
            
      # Cloudflare cache purging
      - name: Purge Cloudflare Cache for Specific URL
        run: |
          RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"hosts":["TBC-NFT.nikolashack.com"]}')
          
          echo "Cloudflare API Response: $RESPONSE"
          
          if echo "$RESPONSE" | grep -q '"success"[[:space:]]*:[[:space:]]*true'; then
            echo "✅ Cloudflare cache purged successfully for TBC-NFT.nikolashack.com!"
          else
            echo "❌ Failed to purge Cloudflare cache! Check the response for details."
            exit 1
          fi
          
      # Display overall build stats  
      - name: Display Overall Build Performance
        run: |
          echo "============= Build Performance Summary ============="
          echo "Workflow ID: ${{ github.run_id }}"
          echo "Multi-platform manifest successfully created and pushed!"
          echo "Tags: latest, ${{ github.sha }}"
          echo "Docker layer caches: Using platform-specific registry caches"
          echo "=====================================================" 