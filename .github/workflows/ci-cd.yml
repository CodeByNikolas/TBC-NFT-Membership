name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Single architecture build (amd64 only for faster iterations)
  build-and-deploy:
    name: Build and Deploy (amd64)
    runs-on: ubuntu-latest
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Checkout Code
        uses: actions/checkout@v3

      # Setup Node.js v20 explicitly
      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      # Ensure npm cache directory exists
      - name: Setup npm cache directory
        run: mkdir -p ~/.npm

      # Add cache for npm dependencies
      - name: Cache node modules
        id: cache-node
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            ${{ runner.os }}-node-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Convert repository name to lowercase for Docker tags
      - name: Prepare Docker Tags
        id: prep
        run: |
          REPO_LOWERCASE="$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
          echo "REPO_LOWERCASE=$REPO_LOWERCASE" >> $GITHUB_ENV

      # Build and push in a single step - amd64 only
      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ env.REPO_LOWERCASE }}:latest
            ghcr.io/${{ env.REPO_LOWERCASE }}:prod
            ghcr.io/${{ env.REPO_LOWERCASE }}:${{ github.sha }}
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_PROJECT_ID=${{ secrets.NEXT_PUBLIC_PROJECT_ID }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
            ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}
            POLYGONSCAN_API_KEY=${{ secrets.POLYGONSCAN_API_KEY }}
            NEXT_TELEMETRY_DISABLED=1
            NODE_ENV=production
            NPM_CONFIG_LOGLEVEL=error
            NPM_CONFIG_FUND=false
            NPM_CONFIG_AUDIT=false
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_LOWERCASE }}:cache
          cache-to: ${{ github.event_name != 'pull_request' && format('type=registry,ref=ghcr.io/{0}:cache,mode=max', env.REPO_LOWERCASE) || 'type=inline' }}
        env:
          BUILDKIT_PROGRESS: plain
          DOCKER_BUILDKIT: 1
      
      # Extract logs from docker build for statistics
      - name: Extract Build Logs
        run: docker buildx build --progress=plain --no-cache=false . 2>&1 | tee /tmp/build_logs.txt || true
      
      - name: Display Build Performance
        run: |
          echo "============= üèóÔ∏è Build Performance Summary ============="
          echo "Build duration: ${{ steps.docker_build.outputs.buildDuration || 'N/A' }}s"
          
          # Check npm installation time
          NPM_INSTALL_TIME=$(grep -o 'RUN npm install.*DONE [0-9.]*s' /tmp/build_logs.txt 2>/dev/null | grep -o '[0-9.]*s' || echo 'N/A')
          if [[ "$NPM_INSTALL_TIME" != "N/A" ]]; then
            echo "  üì¶ Dependencies installation: $NPM_INSTALL_TIME"
          else
            echo "  üì¶ Dependencies installation: CACHED ‚úÖ"
          fi
          
          # Check next.js build time
          NEXTJS_BUILD_TIME=$(grep -o 'Creating an optimized production build.*Generating static pages' /tmp/build_logs.txt -A 1 2>/dev/null | grep -o '[0-9.]*s' || echo 'N/A')
          if [[ "$NEXTJS_BUILD_TIME" != "N/A" ]]; then
            echo "  üî® Next.js build step: $NEXTJS_BUILD_TIME"
          else
            echo "  üî® Next.js build step: CACHED ‚úÖ"
          fi
          
          echo "üü¢ Workflow completed successfully! ‚úÖ"
          echo "=======================================================" 
            
      - name: Purge Cloudflare Cache
        if: github.event_name != 'pull_request'
        run: |
          # Store the response in a variable
          RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}')
          
          # Print the response
          echo "Cloudflare API Response: $RESPONSE"
          
          # Check if the response contains 'success": true' (with any whitespace between : and true)
          if echo "$RESPONSE" | grep -q '"success"[[:space:]]*:[[:space:]]*true'; then
            echo "‚úÖ Cloudflare cache purged successfully!"
          else
            echo "‚ùå Failed to purge Cloudflare cache! Check the response for details."
            exit 1
          fi 